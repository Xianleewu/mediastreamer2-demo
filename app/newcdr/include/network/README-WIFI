WIFI station mode API description
=====================================================

This document describes how to use the APIs of WIFI.

======================================================
#include <network/wifiIf.h>
---------------------------

/* call to turn on wifi
 * Returns: 0 on success, else on failure
 */
int enable_wifi(void);

/* call to turn off wifi
 * Returns: 0 on success, else on failure
 */
int disable_wifi(void);

/* get if wifi is enabled
 * Returns: true on enabled, false on disabled
 */
bool check_if_wifi_enabled(void);

/* start wifi WPS-PBC connecting
 * call to auto connect an AP which the WPS button is pressed.
 * Returns: true on success, false on failure
 */
bool startWifiWpsPBC(void);


/*****************************************************/
#include <network/wpaCtl.h>
----------------------------

/* call to start scan the APs
 * Returns: true on success, false on failure
 */
bool scan(void);

/* get scan result after call scan()
 * @result: buf to save the scan results
 * Returns: true on success, false on failure
 */
bool getScanResult(char* result);

/* get all saved network
 * @result: buf to save network
 * Returns: true on success, false on failure
 */
bool listNetworks(char *result);

/* remove a saved network
 * @ID: the net id to delete
 * Returns: true on success, false on failure
 */
bool removeNetwork(int ID);

/* enable a network
 * @ID: the net id to enable
 * @disableOthers: true to disable other networks
 * Returns: true on success, false on failure
 */
bool enableNetwork(int ID, bool disableOthers);

/* enable all saved network
 * eturns: true on success, false on failure
 */
bool enableAllNetwork(void);

/* disable a saved network
 * if the network in connected state will disconnect
 * @ID: the net id to disable
 * Returns: true on success, false on failure
 */
bool disableNetwork(int ID);

/* call to disconnect wifi connection
 * will do nothing if wifi isn't in connected state
 * Returns: true on success, false on failure
 */
bool disconnect(void);

/* call to reconnect wifi connection
 * Returns: true on success, false on failure
 */
bool reconnect(void);

/* call to add a new AP
 * @ssid: new AP's ssid
 * @password: new AP's password
 * Returns: net id of new AP saved
 */
int addNewAPConfig(char* ssid, char* password);

/* call to get wifi status
 * get the connect state, the messages of AP connected
 * @result: buf to save wifi status
 * Returns: true on success, false on failure
 */
bool status(char* result);

/* get rssi, linkspeed, frequency
 * @result: buf to save signal result
 * Returns: true on success, false on failure
 */
bool getSignalPoll(char * result);

/* call to start wifi driver, set wifi driver in working state
 * Returns: true on success, false on failure
 */
bool startDriver(void);

/* call to stop wifi driver, same to turn off wifi for wifi driver
 * Returns: true on success, false on failure
 */
bool stopDriver(void);


==================================================================
Demo:

#include ...
#include <network/wifiIf.h>
#include <network/wpaCtl.h>

int main(void) {
	int ret;
        int netID = -1;
	...

	//check if wifi is enabled, if not, enable wifi
	if (!check_if_wifi_enabled()) {
		ret = enable_wifi();
		if (!ret) {
			printf("enable wifi fail");
			return -1;
		}
	}
	
	//add a new AP for connecting, the AP's ssid is "xxx", 
	//password is "12345678"
	netID = addNewAPConfig("xxx", "12345678");
	if (netID < 0) {
		printf("add new AP fail");
		return netID;
	}
	//add a new AP success, enable to connet the new AP
	enableNetwork(netID, false);

	...
}
